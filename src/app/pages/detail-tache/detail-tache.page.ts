import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { IonicModule } from '@ionic/angular';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { TaskService } from '../../services/task.service';
import { TaskDetailsService } from '../../services/task-details.service';
import { ITask } from '../../models/interfaces/task.interface';
import { ITaskTabData } from '../../models/interfaces/task-details.interface';

@Component({
  selector: 'app-detail-tache',
  standalone: true,
  imports: [IonicModule, CommonModule, RouterModule],
  templateUrl: './detail-tache.page.html',
  styleUrls: ['./detail-tache.page.scss']
})
export class DetailTachePage implements OnInit, OnDestroy {
  // Donn√©es de la t√¢che
  task: ITask | null = null;
  
  // √âtats de l'interface
  isLoading: boolean = true;
  errorMessage: string = '';
  
  // Sous-t√¢ches et t√¢ches d√©pendantes
  subTasks: ITask[] = [];
  dependentTasks: ITask[] = [];
  
  // Donn√©es des onglets
  tabData: ITaskTabData | null = null;
  selectedTab: string = 'materials';
  
  // Souscriptions
  private subscriptions: Subscription = new Subscription();

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private taskService: TaskService,
    private taskDetailsService: TaskDetailsService
  ) {}

  ngOnInit() {
    console.log('üöÄ DetailTachePage - ngOnInit() appel√©');
    this.loadTaskDetails();
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }

  /**
   * Charge les d√©tails de la t√¢che
   */
  private loadTaskDetails() {
    console.log('üìã DetailTachePage - loadTaskDetails() appel√©');
    
    const taskId = this.route.snapshot.paramMap.get('id');
    console.log('üîç DetailTachePage - taskId depuis route:', taskId);
    
    if (!taskId) {
      console.error('‚ùå DetailTachePage - ID de t√¢che manquant');
      this.errorMessage = 'ID de t√¢che manquant';
      this.isLoading = false;
      return;
    }

    const taskIdNumber = parseInt(taskId);
    console.log('üîç DetailTachePage - Chargement des d√©tails de la t√¢che ID:', taskIdNumber);

    this.isLoading = true;
    this.errorMessage = '';
    console.log('‚è≥ DetailTachePage - √âtat de chargement activ√©');

    // R√©cup√©ration des d√©tails de la t√¢che
    console.log('üìû DetailTachePage - Appel √† taskService.getTaskDetails()');
    const taskSubscription = this.taskService.getTaskDetails(taskIdNumber).subscribe({
      next: (task: any) => {
        console.log('‚úÖ DetailTachePage - D√©tails de la t√¢che r√©cup√©r√©s avec succ√®s:', task);
        console.log('üìä DetailTachePage - Type de task:', typeof task);
        console.log('üìä DetailTachePage - Task est null?', task === null);
        console.log('üìä DetailTachePage - Task est undefined?', task === undefined);
        
        this.task = task;
        this.isLoading = false;
        console.log('‚úÖ DetailTachePage - Task assign√©e, chargement termin√©');
        
        // Chargement des sous-t√¢ches et t√¢ches d√©pendantes
        this.loadRelatedTasks(taskIdNumber);
        
        // Chargement des donn√©es des onglets
        this.loadTabData(taskIdNumber);
      },
      error: (error: any) => {
        console.error('‚ùå DetailTachePage - Erreur lors du chargement des d√©tails:', error);
        console.error('‚ùå DetailTachePage - Type d\'erreur:', typeof error);
        console.error('‚ùå DetailTachePage - Message d\'erreur:', error.message);
        this.errorMessage = 'Impossible de charger les d√©tails de la t√¢che';
        this.isLoading = false;
        console.log('‚ùå DetailTachePage - √âtat d\'erreur activ√©');
      }
    });

    this.subscriptions.add(taskSubscription);
  }

  /**
   * Charge les donn√©es des onglets
   */
  private loadTabData(taskId: number) {
    console.log('üìã DetailTachePage - Chargement des donn√©es d\'onglets pour la t√¢che:', taskId);
    
    const tabDataSubscription = this.taskDetailsService.getTaskTabData(taskId).subscribe({
      next: (data: ITaskTabData) => {
        console.log('‚úÖ DetailTachePage - Donn√©es d\'onglets r√©cup√©r√©es:', data);
        this.tabData = data;
      },
      error: (error: any) => {
        console.error('‚ùå DetailTachePage - Erreur lors du chargement des donn√©es d\'onglets:', error);
      }
    });

    this.subscriptions.add(tabDataSubscription);
  }

  /**
   * Charge les t√¢ches li√©es (sous-t√¢ches et d√©pendances)
   */
  private loadRelatedTasks(taskId: number) {
    console.log('üîó DetailTachePage - loadRelatedTasks() appel√© pour taskId:', taskId);
    
    // Chargement des sous-t√¢ches
    console.log('üìû DetailTachePage - Appel √† taskService.getSubTasks()');
    const subTasksSubscription = this.taskService.getSubTasks(taskId).subscribe({
      next: (tasks: any) => {
        console.log('‚úÖ DetailTachePage - Sous-t√¢ches r√©cup√©r√©es:', tasks);
        this.subTasks = tasks;
      },
      error: (error: any) => {
        console.error('‚ùå DetailTachePage - Erreur lors du chargement des sous-t√¢ches:', error);
      }
    });

    // Chargement des t√¢ches d√©pendantes
    const dependentTasksSubscription = this.taskService.getDependentTasks(taskId).subscribe({
      next: (tasks: any) => {
        console.log('‚úÖ T√¢ches d√©pendantes r√©cup√©r√©es:', tasks);
        this.dependentTasks = tasks;
      },
      error: (error: any) => {
        console.error('‚ùå Erreur lors du chargement des t√¢ches d√©pendantes:', error);
      }
    });

    this.subscriptions.add(subTasksSubscription);
    this.subscriptions.add(dependentTasksSubscription);
  }

  /**
   * Rafra√Æchit les donn√©es de la t√¢che
   */
  refreshTask() {
    this.loadTaskDetails();
  }

  /**
   * Retourne √† la liste des t√¢ches
   */
  goBack() {
    this.router.navigate(['/tabs/liste-taches']);
  }

  /**
   * Modifie la t√¢che
   */
  editTask() {
    console.log('üîß DetailTachePage - editTask() appel√©');
    console.log('üîß DetailTachePage - Task:', this.task);
    console.log('üîß DetailTachePage - Task ID:', this.task?.id);
    
    if (this.task) {
      const url = `/modifier-tache?taskId=${this.task.id}`;
      console.log('üîß DetailTachePage - Navigation vers:', url);
      this.router.navigate(['/modifier-tache'], { queryParams: { taskId: this.task.id } });
    } else {
      console.error('‚ùå DetailTachePage - Pas de t√¢che disponible pour la modification');
    }
  }

  /**
   * Ajoute une photo √† la t√¢che
   */
  addPhoto() {
    console.log('üì∏ Ajouter une photo √† la t√¢che:', this.task?.id);
    // TODO: Impl√©menter la logique d'ajout de photo
  }

  /**
   * √âdite les ressources humaines
   */
  editHumanResources() {
    console.log('üë• √âditer les ressources humaines de la t√¢che:', this.task?.id);
    // TODO: Impl√©menter la logique d'√©dition des ressources humaines
  }

  /**
   * √âdite les ressources mat√©rielles
   */
  editMaterialResources() {
    console.log('üîß √âditer les ressources mat√©rielles de la t√¢che:', this.task?.id);
    // TODO: Impl√©menter la logique d'√©dition des ressources mat√©rielles
  }

  /**
   * Met √† jour la t√¢che
   */
  updateTask() {
    console.log('üîÑ Mettre √† jour la t√¢che:', this.task?.id);
    // TODO: Impl√©menter la logique de mise √† jour
  }

  /**
   * Retourne la t√¢che
   */
  returnTask() {
    console.log('‚Ü©Ô∏è Retourner la t√¢che:', this.task?.id);
    // TODO: Impl√©menter la logique de retour
  }

  /**
   * Obtient l'URL de l'image de la t√¢che
   */
  getTaskImage(task: ITask): string {
    // TODO: Impl√©menter la logique de r√©cup√©ration d'image
    return 'assets/images/taches/default-task.webp';
  }

  /**
   * G√®re les erreurs d'image
   */
  onImageError(event: any, task: ITask) {
    event.target.src = 'assets/images/taches/default-task.webp';
  }

  /**
   * Obtient la classe CSS pour le statut
   */
  getStatusClass(status: string): string {
    return status.toLowerCase().replace(' ', '-');
  }

  /**
   * Obtient la classe CSS pour la priorit√©
   */
  getPriorityClass(priority: string): string {
    const priorityMap: { [key: string]: string } = {
      '0': 'low',
      '1': 'normal',
      '2': 'high',
      '3': 'urgent'
    };
    return priorityMap[priority] || 'normal';
  }

  /**
   * D√©termine si la t√¢che est une t√¢che m√®re (a des sous-t√¢ches)
   */
  isParentTask(): boolean {
    return this.task ? (this.task.childIds && this.task.childIds.length > 0) : false;
  }

  /**
   * D√©termine si la t√¢che est une t√¢che enfant (a des d√©pendances)
   */
  isChildTask(): boolean {
    return this.task ? (this.task.parentId !== undefined && this.task.parentId !== null) : false;
  }

  /**
   * Obtient le type de t√¢che (m√®re, enfant, ou normale)
   */
  getTaskType(): 'parent' | 'child' | 'normal' {
    if (this.isParentTask()) return 'parent';
    if (this.isChildTask()) return 'child';
    return 'normal';
  }

  /**
   * Obtient l'ic√¥ne pour le type de t√¢che
   */
  getTaskTypeIcon(): string {
    switch (this.getTaskType()) {
      case 'parent':
        return 'folder-outline';
      case 'child':
        return 'document-outline';
      default:
        return 'checkmark-circle-outline';
    }
  }

  /**
   * Obtient le label pour le type de t√¢che
   */
  getTaskTypeLabel(): string {
    switch (this.getTaskType()) {
      case 'parent':
        return 'T√¢che m√®re';
      case 'child':
        return 'Sous-t√¢che';
      default:
        return 'T√¢che simple';
    }
  }

  /**
   * Obtient la classe CSS pour le type de t√¢che
   */
  getTaskTypeClass(): string {
    switch (this.getTaskType()) {
      case 'parent':
        return 'task-type-parent';
      case 'child':
        return 'task-type-child';
      default:
        return 'task-type-normal';
    }
  }

  /**
   * Change l'onglet s√©lectionn√©
   */
  selectTab(tabName: string) {
    this.selectedTab = tabName;
  }

  /**
   * V√©rifie si un onglet est s√©lectionn√©
   */
  isTabSelected(tabName: string): boolean {
    return this.selectedTab === tabName;
  }

  /**
   * Obtient le nombre d'√©l√©ments dans un onglet
   */
  getTabCount(tabName: string): number {
    if (!this.tabData) return 0;
    
    switch (tabName) {
      case 'materials':
        return this.tabData.materialPlans?.length || 0;
      case 'consumed':
        return this.tabData.consumedMaterials?.length || 0;
      case 'vehicles':
        return this.tabData.vehicleRequests?.length || 0;
      case 'equipment':
        return this.tabData.equipmentRequests?.length || 0;
      case 'expenses':
        return this.tabData.expenses?.length || 0;
      case 'timesheets':
        return this.tabData.timesheets?.length || 0;
      default:
        return 0;
    }
  }

  // M√©thodes pour les statuts des v√©hicules
  getVehicleStatusColor(state: string): string {
    const statusMap: { [key: string]: string } = {
      'draft': 'warning',
      'confirm': 'primary',
      'cancel': 'danger',
      'done': 'success'
    };
    return statusMap[state] || 'medium';
  }

  getVehicleStatusLabel(state: string): string {
    const statusMap: { [key: string]: string } = {
      'draft': 'Brouillon',
      'confirm': 'Confirm√©',
      'cancel': 'Annul√©',
      'done': 'Termin√©'
    };
    return statusMap[state] || state;
  }

  // M√©thodes pour les statuts des √©quipements
  getEquipmentStatusColor(state: string): string {
    return this.getVehicleStatusColor(state); // M√™me logique que les v√©hicules
  }

  getEquipmentStatusLabel(state: string): string {
    return this.getVehicleStatusLabel(state); // M√™me logique que les v√©hicules
  }

  // M√©thodes pour les statuts des d√©penses
  getExpenseStatusColor(state: string): string {
    const statusMap: { [key: string]: string } = {
      'draft': 'warning',
      'reported': 'primary',
      'approved': 'success',
      'refused': 'danger',
      'done': 'success'
    };
    return statusMap[state] || 'medium';
  }

  getExpenseStatusLabel(state: string): string {
    const statusMap: { [key: string]: string } = {
      'draft': 'Brouillon',
      'reported': 'Rapport√©',
      'approved': 'Approuv√©',
      'refused': 'Refus√©',
      'done': 'Termin√©'
    };
    return statusMap[state] || state;
  }
} 