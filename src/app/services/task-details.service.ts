import { Injectable } from '@angular/core';
import { CapacitorHttp, HttpOptions } from '@capacitor/core';
import { Observable, from, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { 
  ITaskTabData, 
  IMaterialPlan, 
  IConsumedMaterial, 
  IVehicleRequest, 
  IEquipmentRequest, 
  IExpense, 
  ITimesheet 
} from '../models/interfaces/task-details.interface';

@Injectable({
  providedIn: 'root'
})
export class TaskDetailsService {
  private odooUrl = 'https://btp.onaerp.com/jsonrpc';
  private dbName = 'btptst';
  private uid: number = 7; // UID par d√©faut

  constructor() {}

  /**
   * R√©cup√®re toutes les donn√©es des onglets pour une t√¢che
   * @param taskId ID de la t√¢che
   * @returns Observable<ITaskTabData>
   */
  getTaskTabData(taskId: number): Observable<ITaskTabData> {
    console.log('üîç TaskDetailsService - R√©cup√©ration des donn√©es d\'onglets pour la t√¢che:', taskId);
    
    return from(Promise.all([
      this.getMaterialPlans(taskId),
      this.getConsumedMaterials(taskId),
      this.getVehicleRequests(taskId),
      this.getEquipmentRequests(taskId),
      this.getExpenses(taskId),
      this.getTimesheets(taskId)
    ])).pipe(
      map(([materialPlans, consumedMaterials, vehicleRequests, equipmentRequests, expenses, timesheets]) => {
        return {
          materialPlans,
          consumedMaterials,
          vehicleRequests,
          equipmentRequests,
          expenses,
          timesheets
        };
      }),
      catchError(error => {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es d\'onglets:', error);
        return of({
          materialPlans: [],
          consumedMaterials: [],
          vehicleRequests: [],
          equipmentRequests: [],
          expenses: [],
          timesheets: []
        });
      })
    );
  }

  /**
   * R√©cup√®re les plans de mat√©riaux
   */
  private async getMaterialPlans(taskId: number): Promise<IMaterialPlan[]> {
    try {
      // Pour l'instant, retourner un tableau vide car le mod√®le n'existe pas
      console.log('üìã Plans de mat√©riaux - Mod√®le non disponible');
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des plans de mat√©riaux:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les mat√©riaux consomm√©s
   */
  private async getConsumedMaterials(taskId: number): Promise<IConsumedMaterial[]> {
    try {
      // Pour l'instant, retourner un tableau vide car le mod√®le n'existe pas
      console.log('üìã Mat√©riaux consomm√©s - Mod√®le non disponible');
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des mat√©riaux consomm√©s:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les demandes de v√©hicules
   */
  private async getVehicleRequests(taskId: number): Promise<IVehicleRequest[]> {
    try {
      // Pour l'instant, retourner un tableau vide car le mod√®le n'existe pas
      console.log('üìã Demandes de v√©hicules - Mod√®le non disponible');
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des demandes de v√©hicules:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les demandes d'√©quipements
   */
  private async getEquipmentRequests(taskId: number): Promise<IEquipmentRequest[]> {
    try {
      // Pour l'instant, retourner un tableau vide car le mod√®le n'existe pas
      console.log('üìã Demandes d\'√©quipements - Mod√®le non disponible');
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des demandes d\'√©quipements:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les d√©penses li√©es √† la t√¢che
   */
  private async getExpenses(taskId: number): Promise<IExpense[]> {
    try {
      // D'abord, r√©cup√©rer les IDs des d√©penses de la t√¢che
      const taskData = await this.getTaskExpenseIds(taskId);
      if (!taskData || !taskData.expense_ids || taskData.expense_ids.length === 0) {
        console.log('üìã Aucune d√©pense trouv√©e pour la t√¢che:', taskId);
        return [];
      }

      // Ensuite, r√©cup√©rer les d√©tails des d√©penses
      const requestBody = {
        jsonrpc: "2.0",
        method: "call",
        params: {
          service: "object",
          method: "execute_kw",
          args: [
            this.dbName,
            this.uid,
            "demo",
            "hr.expense",
            "search_read",
            [[["id", "in", taskData.expense_ids]]],
            {
              fields: ['id', 'name', 'date', 'product_id', 'quantity', 'total_amount', 'state'],
              limit: 50
            }
          ]
        }
      };

      const options: HttpOptions = {
        url: this.odooUrl,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'ONA-BTP-Mobile/1.0'
        },
        data: requestBody,
        connectTimeout: 10000,
        readTimeout: 10000
      };

      const response = await CapacitorHttp.post(options);
      
      if (response.status === 200 && response.data?.result) {
        console.log('‚úÖ D√©penses r√©cup√©r√©es:', response.data.result.length);
        return response.data.result;
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©penses:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les feuilles de temps li√©es √† la t√¢che
   */
  private async getTimesheets(taskId: number): Promise<ITimesheet[]> {
    try {
      // D'abord, r√©cup√©rer les IDs des feuilles de temps de la t√¢che
      const taskData = await this.getTaskTimesheetIds(taskId);
      if (!taskData || !taskData.timesheet_ids || taskData.timesheet_ids.length === 0) {
        console.log('üìã Aucune feuille de temps trouv√©e pour la t√¢che:', taskId);
        return [];
      }

      // Ensuite, r√©cup√©rer les d√©tails des feuilles de temps
      const requestBody = {
        jsonrpc: "2.0",
        method: "call",
        params: {
          service: "object",
          method: "execute_kw",
          args: [
            this.dbName,
            this.uid,
            "demo",
            "account.analytic.line",
            "search_read",
            [[["id", "in", taskData.timesheet_ids]]],
            {
              fields: ['id', 'date', 'employee_id', 'name', 'unit_amount', 'end_time', 'job_cost_id'],
              limit: 50
            }
          ]
        }
      };

      const options: HttpOptions = {
        url: this.odooUrl,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'ONA-BTP-Mobile/1.0'
        },
        data: requestBody,
        connectTimeout: 10000,
        readTimeout: 10000
      };

      const response = await CapacitorHttp.post(options);
      
      if (response.status === 200 && response.data?.result) {
        console.log('‚úÖ Feuilles de temps r√©cup√©r√©es:', response.data.result.length);
        return response.data.result;
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des feuilles de temps:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re les IDs des d√©penses d'une t√¢che
   */
  private async getTaskExpenseIds(taskId: number): Promise<{expense_ids: number[]} | null> {
    try {
      const requestBody = {
        jsonrpc: "2.0",
        method: "call",
        params: {
          service: "object",
          method: "execute_kw",
          args: [
            this.dbName,
            this.uid,
            "demo",
            "project.task",
            "search_read",
            [[["id", "=", taskId]]],
            {
              fields: ['expense_ids'],
              limit: 1
            }
          ]
        }
      };

      const options: HttpOptions = {
        url: this.odooUrl,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'ONA-BTP-Mobile/1.0'
        },
        data: requestBody,
        connectTimeout: 10000,
        readTimeout: 10000
      };

      const response = await CapacitorHttp.post(options);
      
      if (response.status === 200 && response.data?.result && response.data.result.length > 0) {
        return response.data.result[0];
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des IDs de d√©penses:', error);
      return null;
    }
  }

  /**
   * R√©cup√®re les IDs des feuilles de temps d'une t√¢che
   */
  private async getTaskTimesheetIds(taskId: number): Promise<{timesheet_ids: number[]} | null> {
    try {
      const requestBody = {
        jsonrpc: "2.0",
        method: "call",
        params: {
          service: "object",
          method: "execute_kw",
          args: [
            this.dbName,
            this.uid,
            "demo",
            "project.task",
            "search_read",
            [[["id", "=", taskId]]],
            {
              fields: ['timesheet_ids'],
              limit: 1
            }
          ]
        }
      };

      const options: HttpOptions = {
        url: this.odooUrl,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'ONA-BTP-Mobile/1.0'
        },
        data: requestBody,
        connectTimeout: 10000,
        readTimeout: 10000
      };

      const response = await CapacitorHttp.post(options);
      
      if (response.status === 200 && response.data?.result && response.data.result.length > 0) {
        return response.data.result[0];
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des IDs de feuilles de temps:', error);
      return null;
    }
  }
}
